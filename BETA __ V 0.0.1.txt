import cv2
import tkinter as tk
from PIL import Image, Image


def main():





#Charge the clasify of de face of HAAR-CASCADE
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

#Start the capture of the video (0 by the camera predeterminate)
cap = cv2.VideoCapture(0)

#Verify the correctly on
if not cap.isOpened():
    print('ERROR: CAMERA NOT FOUND')
    exit()

#Create a windows with the name face detection and customizable
cv2.namedWindow('FACE DETECTION', cv2.WINDOW_NORMAL)
cv2.resizeWindow('FACE DETECTION', 640,480) #size of the window
screen_width, screen_height = 1920,1080 #Resolution of the screen
window_width, window_height = 640, 480
x_pos = (screen_width - window_width) // 2
y_pos = (screen_height - window_height) // 2
cv2.moveWindow('FACE DETECTION', x_pos,y_pos)

while True:
    #Capture frame to frame
    ret, frame = cap.read()

    #Verify that the frame is capture correctly form
    if not ret:
        print('ERROR: THE FRAME IS LOSS')
        break

    #Transform the frame to gray color
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    #Detecting the faces in the frame
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    #Draw a figure in the image
    for(x,y,w,h) in faces:
        cv2.rectangle(frame,(x,y),(x+w, y+h),(0,255,0),4)

    #View the frame with the detections
    cv2.imshow('Face Detection', frame)

    #Waiting a 1 ms and verify that press q by exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break


#FREE SPACE AND CLOSE
cap.release()
cv2.destroyWindow()


if __name__ == "START":
    main()